# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

jobs:
  write-inventory:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: pwd
      - run: ls -la
      - checkout
      - run: ls -la
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ~/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=aws-cloud9-myDevops-4c83fde84ae342bab3bed24c0cb7e4a3" \
              --output text >> ~/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - run: ls -l /tmp
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - attach_workspace:
          at: ~/
      - run:
          name: TEST ATTACH
          command: |
            ls -l ~/
            cat ~/inventory.txt
  build:
    working_directory: ~/repo
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
            
  deploy-infrastructure:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            
      - run:
          name: CHECK VERSIONS
          command: |
            echo "checking versions on this image"
            ls -l /usr/local/bin/
            pwd
            ls -l
            whoami
            kubectl version --client
            eksctl version
            echo "Current cluster looks like this"
          #  eksctl get cluster --name elcapo--region=us-east-2
          #  echo "deploy a new cluster and deploy new container to it..."
          # eksctl create cluster --name house-cap --nodes=2 --node-type t3.medium
          # echo "give me the progress...."
          # eksctl utils describe-stacks --region=us-west-2 --cluster=house-cap
          # echo "get the cluster name using esctl"
          # eksctl get cluster --name house-cap --region=us-west-2
          # echo "use kubectl to interact"
          # kubectl get nodes
          # testing.....
          
            
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["49:94:01:d8:4a:94:6e:b5:48:3e:2a:a1:cf:f7:67:ae"]
      - run:
          name: Install tar gzip ansible utility
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ~/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=aws-cloud9-myDevops-4c83fde84ae342bab3bed24c0cb7e4a3" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server using Ansible 'configure-server.yml'
          command: |
            cat ~/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt configure-server.yml
            
workflows:
  default:
    jobs:
      - deploy-infrastructure
      - build:
          requires: [deploy-infrastructure]
      - configure-infrastructure:
          requires: [build]